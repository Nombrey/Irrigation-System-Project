esphome:
  name: rapberry-pico-w--balcony
  friendly_name: Rapberry Pico W - Balcony

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "1xMIw2XNfubgnbMZDyKI3+uBNeGxPWu4TfnjFoi2Ecw="

ota:
  password: "94ff61bdc56fec3cc937b8e938cdab7c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Rapberry-Pico-W--Balcony"
    password: "lrsrKFupT7lM"

#helpervariables
globals:
  #Variable to convert the desired amount of litres to ms the pump needs to run to achieve that
   - id: liter_to_ms
     type: int
     restore_value: no
     initial_value: '60000'

binary_sensor:
    #import watering mode input booleans from homeassistant to esphome
    - platform: homeassistant
      id: manual_mode
      name: "Manual Mode"
      entity_id: input_boolean.watering_manual_mode 

    - platform: homeassistant
      id: sunny_mode
      name: "Sunny Mode"
      entity_id: input_boolean.watering_sunny_mode 

    - platform: homeassistant
      id: cloudy_mode
      name: "Cloudy Mode"
      entity_id: input_boolean.watering_cloudy_mode 

    - platform: homeassistant
      id: rainy_mode
      name: "Rainy Mode"
      entity_id: input_boolean.watering_rainy_mode 

    - platform: homeassistant
      id: winter_mode
      name: "Winter Mode"
      entity_id: input_boolean.watering_winter_mode 

sensor:
    #import watering amounts from homeassistant to esphome
    - platform: homeassistant
      id: sunny_amount
      name: "Sunny Amount"
      entity_id: input_number.watering_amount_sunny

    - platform: homeassistant
      id: cloudy_amount
      name: "Cloudy Amount"
      entity_id: input_number.watering_amount_cloudy

    - platform: homeassistant
      id: rainy_amount
      name: "Rainy Amount"
      entity_id: input_number.watering_amount_rainy

    #import watering amounts from homeassistant to esphome
    - platform: homeassistant
      id: outdoor_temp
      name: "Outdoor Temp"
      entity_id: sensor.forecast_temperature

    #Fill level sensor
    - platform: adc
      pin: 26
      name: Fill level
      accuracy_decimals: 3
      update_interval: 5s
      filters:
       - multiply: 1

text_sensor:
    #import current weathercondition
    - platform: homeassistant
      id: weather_condition
      name: "Weather Condition"
      entity_id: sensor.forecast_condition

time:
  - platform: sntp
    # update input booleans in home assistant based on current conditions every 5 minutes
    on_time:
      - seconds: 0
        minutes: /1
        then:
          #activate winter mode if outdoor temp is 0 or lower
          - if:
              condition:
              - lambda:  'return (id(outdoor_temp).state <= 0) && !(id(manual_mode).state);'
              then:
              - homeassistant.service:
                  service: input_boolean.turn_on
                  data:
                    entity_id: input_boolean.watering_winter_mode
              else:
              - homeassistant.service:
                  service: input_boolean.turn_off
                  data:
                    entity_id: input_boolean.watering_winter_mode 

          #activate weather mode depending on text value (weather condition) from forecast
          - if:
              condition:
              - lambda:  'return (id(weather_condition).state == "sunny") && !(id(manual_mode).state) && !(id(winter_mode).state);'
              then:
              - homeassistant.service:
                  service: input_boolean.turn_on
                  data:
                    entity_id: input_boolean.watering_sunny_mode
              else:
              - homeassistant.service:
                  service: input_boolean.turn_off
                  data:
                    entity_id: input_boolean.watering_sunny_mode 

          - if:
              condition:
              - lambda:  'return ((id(weather_condition).state == "cloudy") || (id(weather_condition).state == "partly cloudy")) && !(id(manual_mode).state) && !(id(winter_mode).state);'
              then:
              - homeassistant.service:
                  service: input_boolean.turn_on
                  data:
                    entity_id: input_boolean.watering_cloudy_mode
              else:
              - homeassistant.service:
                  service: input_boolean.turn_off
                  data:
                    entity_id: input_boolean.watering_cloudy_mode 

          - if:
              condition:
              - lambda:  'return (id(weather_condition).state == "rainy") && !(id(manual_mode).state) && !(id(winter_mode).state);'
              then:
              - homeassistant.service:
                  service: input_boolean.turn_on
                  data:
                    entity_id: input_boolean.watering_rainy_mode
              else:
              - homeassistant.service:
                  service: input_boolean.turn_off
                  data:
                    entity_id: input_boolean.watering_rainy_mode 

switch:
  - platform: gpio
    # Testing relay on GPIO 0
    pin: 0
    id: relay
    name: "Relay GPO0"
    on_turn_on: 
      then:
      - delay: !lambda |-
          if (id(manual_mode).state || id(winter_mode).state){
            return 0;
          }
          else {
            if (id(sunny_mode).state) {
              return id(sunny_amount).state*id(liter_to_ms);
            }
            if (id(cloudy_mode).state) {
              return id(cloudy_amount).state*id(liter_to_ms);
            }
            if (id(rainy_mode).state) {
              return id(rainy_amount).state*id(liter_to_ms);
            }
            else {
            return 0;
            }
          }

      - switch.turn_off: relay
             
